{
  "hash": "83b90e5dcdb809e51ee88c51792814ca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"homework9\"\njupyter: python3\nauthor: \"ohseyn\"\ndate: \"2024-09-09\"\ncategories: [bigdata]\n---\n\n\n## 변수들\n\n종속변수: 백혈병 세포 관측 불가 여부 (REMISS), 1이면 관측 안됨을 의미\n\n독립변수:<br>\n        골수의 세포성 (CELL)<br>\n        골수편의 백혈구 비율 (SMEAR)<br>\n        골수의 백혈병 세포 침투 비율 (INFIL)<br>\n        골수 백혈병 세포의 라벨링 인덱스 (LI)<br>\n        말초혈액의 백혈병 세포 수 (BLAST)<br>\n        치료 시작 전 최고 체온 (TEMP)<br>\n\n## 1. 데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요.\n\n::: {#d42add09 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nfrom scipy.stats import norm\n\nleukemia_df = pd.read_csv('C:/Users/User/Documents/LSBigDataSchool/lsbigdata_project1/Data/leukemia_remission.txt', delimiter='\\t')\nprint(leukemia_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    REMISS  CELL  SMEAR  INFIL   LI  BLAST  TEMP\n0        1  0.80   0.83   0.66  1.9   1.10  1.00\n1        1  0.90   0.36   0.32  1.4   0.74  0.99\n2        0  0.80   0.88   0.70  0.8   0.18  0.98\n3        0  1.00   0.87   0.87  0.7   1.05  0.99\n4        1  0.90   0.75   0.68  1.3   0.52  0.98\n5        0  1.00   0.65   0.65  0.6   0.52  0.98\n6        1  0.95   0.97   0.92  1.0   1.23  0.99\n7        0  0.95   0.87   0.83  1.9   1.35  1.02\n8        0  1.00   0.45   0.45  0.8   0.32  1.00\n9        0  0.95   0.36   0.34  0.5   0.00  1.04\n10       0  0.85   0.39   0.33  0.7   0.28  0.99\n11       0  0.70   0.76   0.53  1.2   0.15  0.98\n12       0  0.80   0.46   0.37  0.4   0.38  1.01\n13       0  0.20   0.39   0.08  0.8   0.11  0.99\n14       0  1.00   0.90   0.90  1.1   1.04  0.99\n15       1  1.00   0.84   0.84  1.9   2.06  1.02\n16       0  0.65   0.42   0.27  0.5   0.11  1.01\n17       0  1.00   0.75   0.75  1.0   1.32  1.00\n18       0  0.50   0.44   0.22  0.6   0.11  0.99\n19       1  1.00   0.63   0.63  1.1   1.07  0.99\n20       0  1.00   0.33   0.33  0.4   0.18  1.01\n21       0  0.90   0.93   0.84  0.6   1.59  1.02\n22       1  1.00   0.58   0.58  1.0   0.53  1.00\n23       0  0.95   0.32   0.30  1.6   0.89  0.99\n24       1  1.00   0.60   0.60  1.7   0.96  0.99\n25       1  1.00   0.69   0.69  0.9   0.40  0.99\n26       0  1.00   0.73   0.73  0.7   0.40  0.99\n```\n:::\n:::\n\n\n로지스틱 회귀모델 적합 및 회귀표 작성\n\n::: {#a5dd65d4 .cell execution_count=2}\n``` {.python .cell-code}\nmodel = sm.formula.logit(\"REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP\", data=leukemia_df).fit()\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:41:14   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n```\n:::\n:::\n\n\n## 2. 해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오.\n\nLLR p-value가 유의수준 0.05보다 작으므로 모델 자체는 유의하다고 볼 수 있다.\n\n## 3. 유의수준이 0.2를 기준으로 통계적으로 유의한 변수는 몇 개이며, 어느 변수 인가요?\n\n2개. LI, TEMP\n\n## 4. 다음 환자에 대한 오즈는 얼마인가요? \n- CELL: 65% SMEAR: 45% INFIL: 55% LI: 1.2 BLAST: 1.1 세포/μL TEMP: 0.9\n\n::: {#18d88d77 .cell execution_count=3}\n``` {.python .cell-code}\nlog_odds = (64.2581 + (30.8301* 0.65) + (24.6863 * 0.45) + (-24.9745 * 0.55) + (4.3605*1.2) + (-0.0115 * 1.1) + (-100.1734 * 0.9))\nodds = np.exp(log_odds)\nprint(odds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.03817459641135519\n```\n:::\n:::\n\n\n## 5. 위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?\n\n::: {#efb4005d .cell execution_count=4}\n``` {.python .cell-code}\np_hat = odds / (odds + 1)\nprint(p_hat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.03677088280074742\n```\n:::\n:::\n\n\n## 6. TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.\n\n-100.1734<br>\n<br>\nnp.exp(-100.1734)은 0에 가까운 값이다. 이는 체온이 1단위 상승할 때 백혈병 세포가 관측되지 않을 확률이 거의 없어지는 것을 의미(오즈비만큼 변동)한다. 따라서, 온도가 높아질수록 백혈병 세포가 관측될 확률 높아진다.\n\n## 7. CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.\n\n::: {#6aa17f64 .cell execution_count=5}\n``` {.python .cell-code}\nnp.exp(30.8301 + 2.58*52.135)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\nnp.float64(6.390793233753385e+71)\n```\n:::\n:::\n\n\n::: {#87274eef .cell execution_count=6}\n``` {.python .cell-code}\nnp.exp(30.8301 - 2.58*52.135)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\nnp.float64(9.400043131530397e-46)\n```\n:::\n:::\n\n\n(9.400043131530397e-46, 6.390793233753385e+71)\n\n## 8. 주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, 50% 이상인 경우 1로 처리하여, 혼동 행렬을 구하시오.\n\n::: {#92cbd385 .cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\ntrain = leukemia_df.drop(columns=('REMISS'))\n\ny_pred = model.predict(train)\nresult = pd.DataFrame({'y_pred' : y_pred})\nresult['result'] = np.where(result['y_pred']>=0.5, 1,0)\n\nconf_mat = confusion_matrix(y_true = leukemia_df['REMISS'], y_pred = result['result'], labels=[1,0])\np = ConfusionMatrixDisplay(confusion_matrix = conf_mat, display_labels = ('1', '0'))\np.plot(cmap=\"Blues\")\n```\n\n::: {.cell-output .cell-output-display}\n![](homework9_files/figure-html/cell-8-output-1.png){width=496 height=429}\n:::\n:::\n\n\n## 9. 해당 모델의 Accuracy는 얼마인가요?\n(5+15)/(5+3+4+15)\n\n::: {#6b3e65c6 .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.metrics import accuracy_score\naccuracy_score(leukemia_df['REMISS'], result['result'])\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n0.7407407407407407\n```\n:::\n:::\n\n\n## 10. 해당 모델의 F1 Score를 구하세요.\nprecision = 5/(5+3)<br>\nrecall = 5/(5+4)<br>\nf1 = 2 / (1/precision + 1/recall)\n\n::: {#bcdbfc70 .cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.metrics import f1_score\nf1_score(leukemia_df['REMISS'], result['result'])\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nnp.float64(0.5882352941176471)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "homework9_files"
    ],
    "filters": [],
    "includes": {}
  }
}